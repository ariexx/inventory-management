services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: inventory_app
    restart: unless-stopped
    working_dir: /var/www
    ports:
      - "127.0.0.1:9000:9000" # Tepat untuk koneksi Nginx dari host

    # FIX 1: Gunakan env_file untuk satu sumber kebenaran
    env_file:
      - .env

    # FIX 2: Gunakan volume bernama untuk storage, hapus volume untuk cache
    volumes:
      - app_storage:/var/www/storage # Gunakan named volume untuk storage

    networks:
      - inventory_network
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  mysql:
    image: mysql:8.0
    container_name: inventory_mysql
    restart: unless-stopped
    # Rekomendasi: Hapus port ini di produksi jika tidak perlu debugging dari host
    ports:
      - "127.0.0.1:3308:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root_password_123
      MYSQL_DATABASE: inventory_db
      MYSQL_USER: inventory_user
      MYSQL_PASSWORD: your_secure_password
    volumes:
      - mysql_data:/var/lib/mysql # Sangat baik, sudah menggunakan named volume
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - inventory_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot_password_123"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s
    command: --default-authentication-plugin=mysql_native_password --bind-address=0.0.0.0

# Definisikan semua named volumes di sini
volumes:
  mysql_data:
  app_storage: # FIX 3: Definisikan named volume untuk storage aplikasi

networks:
  inventory_network:
    driver: bridge
