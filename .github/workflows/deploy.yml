name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: inventory_2025_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, mysql, gd

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install PHP Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Install NPM Dependencies
        run: npm ci

      - name: Build Assets
        run: npm run build

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          script: |
            # Use home directory instead of /var/www
            PROJECT_DIR="$HOME/inventory-management.shop"

            git config --global --add safe.directory $PROJECT_DIR

            # Clone or pull project
            if [ ! -d "$PROJECT_DIR" ]; then
              git clone https://github.com/ariexx/inventory-management.git $PROJECT_DIR
            else
              cd $PROJECT_DIR
              git pull origin main
            fi

            cd $PROJECT_DIR

            # Create required directories and set permissions
            mkdir -p storage/logs bootstrap/cache
            chmod -R 755 storage bootstrap/cache
            chown -R $USER:$USER $PROJECT_DIR

            # Stop containers first and clean up
            docker-compose -f docker-compose.prod.yml down || true
            docker system prune -f

            # Copy and configure .env file
            cp .env.example .env
            sed -i 's|APP_URL=.*|APP_URL=https://inventory-management.shop|' .env
            sed -i 's|APP_DEBUG=.*|APP_DEBUG=false|' .env
            sed -i 's|APP_ENV=.*|APP_ENV=production|' .env
            sed -i 's|DB_HOST=.*|DB_HOST=127.0.0.1|' .env
            sed -i 's|DB_PORT=.*|DB_PORT=3308|' .env  # Updated to 3308
            sed -i 's|DB_DATABASE=.*|DB_DATABASE=inventory_db|' .env
            sed -i 's|DB_USERNAME=.*|DB_USERNAME=inventory_user|' .env
            sed -i 's|DB_PASSWORD=.*|DB_PASSWORD=your_secure_password|' .env
            sed -i 's|SESSION_SECURE_COOKIE=.*|SESSION_SECURE_COOKIE=true|' .env

            # Install dependencies on host
            composer install --no-dev --optimize-autoloader
            npm ci --production
            npm run build

            # Generate app key
            php artisan key:generate

            # Start containers
            docker-compose -f docker-compose.prod.yml up -d --build

            # Wait for containers to be ready
            sleep 45

            # Run Laravel commands
            docker-compose -f docker-compose.prod.yml exec -T app php artisan migrate --force
            docker-compose -f docker-compose.prod.yml exec -T app php artisan config:cache
            docker-compose -f docker-compose.prod.yml exec -T app php artisan route:cache
            docker-compose -f docker-compose.prod.yml exec -T app php artisan view:cache
            docker-compose -f docker-compose.prod.yml exec -T app php artisan storage:link

            # Remove any existing nginx config
            sudo rm -f /etc/nginx/sites-enabled/inventory-management.shop

            # Configure nginx VPS dengan SSL
            sudo tee /etc/nginx/sites-available/inventory-management.shop > /dev/null <<EOF
            server {
                listen 80;
                server_name inventory-management.shop www.inventory-management.shop;
                return 301 https://\$server_name\$request_uri;
            }

            server {
                listen 443 ssl http2;
                server_name inventory-management.shop www.inventory-management.shop;

                ssl_certificate /etc/letsencrypt/live/inventory-management.shop/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/inventory-management.shop/privkey.pem;

                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
                ssl_prefer_server_ciphers on;
                ssl_session_cache shared:SSL:10m;

                root $PROJECT_DIR/public;
                index index.php index.html index.htm;

                # Security headers
                add_header X-Frame-Options "SAMEORIGIN" always;
                add_header X-XSS-Protection "1; mode=block" always;
                add_header X-Content-Type-Options "nosniff" always;
                add_header Referrer-Policy "no-referrer-when-downgrade" always;
                add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

                location / {
                    try_files \$uri \$uri/ /index.php?\$query_string;
                }

                location ~ \.php$ {
                    fastcgi_pass 127.0.0.1:9000;
                    fastcgi_index index.php;
                    fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
                    fastcgi_param HTTPS on;
                    include fastcgi_params;
                }

                location ~ /\.ht {
                    deny all;
                }

                location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                    expires 1y;
                    add_header Cache-Control "public, immutable";
                }

                # Laravel storage
                location ^~ /storage/ {
                    alias $PROJECT_DIR/storage/app/public/;
                    try_files \$uri =404;
                }
            }
            EOF

            # Enable site
            sudo ln -sf /etc/nginx/sites-available/inventory-management.shop /etc/nginx/sites-enabled/

            # Test nginx config
            if sudo nginx -t; then
              if ! sudo systemctl is-active --quiet nginx; then
                echo "Starting nginx service..."
                sudo systemctl start nginx
              else
                echo "Reloading nginx service..."
                sudo systemctl reload nginx
              fi
            else
              echo "Nginx configuration test failed"
              exit 1
            fi

            # Set final permissions
            sudo chown -R www-data:www-data $PROJECT_DIR/storage $PROJECT_DIR/bootstrap/cache
