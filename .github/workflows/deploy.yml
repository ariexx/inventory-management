name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: inventory_2025_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, mysql, gd

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install PHP Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Install NPM Dependencies
        run: npm ci

      - name: Build Assets
        run: npm run build

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          script: |
            # Use home directory instead of /var/www
            PROJECT_DIR="$HOME/inventory-management.shop"

            git config --global --add safe.directory $PROJECT_DIR

            # Clone or pull project
            if [ ! -d "$PROJECT_DIR" ]; then
              git clone https://github.com/ariefly/inventory-management.shop.git $PROJECT_DIR
            else
              cd $PROJECT_DIR
              git pull origin main
            fi

            cd $PROJECT_DIR

            # Create required directories
            mkdir -p docker/php docker/nginx

            # Stop containers first for SSL generation
            docker-compose -f docker-compose.prod.yml down || true

            # Generate SSL certificate if not exists
            if [ ! -f "/etc/letsencrypt/live/inventory-management.shop/fullchain.pem" ]; then
              sudo apt update
              sudo apt install -y certbot
              sudo certbot certonly --standalone -d inventory-management.shop -d www.inventory-management.shop --non-interactive --agree-tos --email ariefly@example.com
            fi

            # Copy and configure .env file
            cp .env.example .env
            sed -i 's|APP_URL=.*|APP_URL=https://inventory-management.shop|' .env
            sed -i 's|DB_HOST=.*|DB_HOST=mysql|' .env
            sed -i 's|DB_DATABASE=.*|DB_DATABASE=inventory_db|' .env
            sed -i 's|DB_USERNAME=.*|DB_USERNAME=inventory_user|' .env
            sed -i 's|DB_PASSWORD=.*|DB_PASSWORD=secure_password_123|' .env

            # Generate app key if not exists
            php artisan key:generate

            # Start containers
            docker-compose -f docker-compose.prod.yml up -d --build

            # Wait for containers to be ready
            sleep 20

            # Run Laravel commands
            docker-compose -f docker-compose.prod.yml exec -T app composer install --no-dev --optimize-autoloader
            docker-compose -f docker-compose.prod.yml exec -T app php artisan migrate --force
            docker-compose -f docker-compose.prod.yml exec -T app php artisan config:cache
            docker-compose -f docker-compose.prod.yml exec -T app php artisan route:cache
            docker-compose -f docker-compose.prod.yml exec -T app php artisan view:cache
