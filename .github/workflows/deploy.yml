name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: inventory_2025_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, mysql, gd

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install PHP Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Install NPM Dependencies
        run: npm ci

      - name: Build Assets
        run: npm run build

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          script: |
            # Use home directory instead of /var/www
            PROJECT_DIR="$HOME/inventory-management.shop"

            git config --global --add safe.directory $PROJECT_DIR

            # Clone or pull project
            if [ ! -d "$PROJECT_DIR" ]; then
              git clone https://github.com/ariexx/inventory-management.git $PROJECT_DIR
            else
              cd $PROJECT_DIR
              git pull origin main
            fi

            cd $PROJECT_DIR

            # Create required directories and set permissions
            mkdir -p storage/logs bootstrap/cache
            chmod -R 755 storage bootstrap/cache
            chown -R $USER:$USER $PROJECT_DIR

            # Stop containers first and clean up
            docker-compose -f docker-compose.prod.yml down || true
            docker system prune -f

            # Copy and configure .env file
            cp .env.example .env
            sed -i 's|APP_URL=.*|APP_URL=https://inventory-management.shop|' .env
            sed -i 's|APP_DEBUG=.*|APP_DEBUG=false|' .env
            sed -i 's|APP_ENV=.*|APP_ENV=production|' .env
            sed -i 's|DB_HOST=.*|DB_HOST=mysql|' .env
            sed -i 's|DB_PORT=.*|DB_PORT=3306|' .env
            sed -i 's|DB_DATABASE=.*|DB_DATABASE=inventory_db|' .env
            sed -i 's|DB_USERNAME=.*|DB_USERNAME=inventory_user|' .env
            sed -i 's|DB_PASSWORD=.*|DB_PASSWORD=your_secure_password|' .env
            sed -i 's|SESSION_SECURE_COOKIE=.*|SESSION_SECURE_COOKIE=true|' .env

            # Start containers with better error handling
            echo "=== Building and Starting Containers ==="
            if ! docker-compose -f docker-compose.prod.yml up -d --build; then
              echo "Failed to start containers, checking logs..."
              docker-compose -f docker-compose.prod.yml logs
              exit 1
            fi

            # Wait for containers to be healthy with better timeout
            echo "=== Waiting for containers to be healthy ==="
            for i in {1..60}; do
              if docker-compose -f docker-compose.prod.yml ps | grep -q "healthy"; then
                echo "Containers are healthy"
                break
              fi
              echo "Waiting for containers to be healthy... ($i/60)"
              sleep 5
            done

            # Check if containers are actually running
            echo "=== Checking Container Status ==="
            docker-compose -f docker-compose.prod.yml ps

            # Only proceed if app container is running
            if ! docker-compose -f docker-compose.prod.yml exec -T app echo "Container is responsive" 2>/dev/null; then
              echo "=== Container not responsive, checking logs ==="
              docker-compose -f docker-compose.prod.yml logs app
              echo "=== Attempting to restart containers ==="
              docker-compose -f docker-compose.prod.yml restart app
              sleep 30
            fi

            # Laravel setup with better error handling
            echo "=== Setting up Laravel Application ==="

            # Generate Laravel Key
            if docker-compose -f docker-compose.prod.yml exec -T app php artisan key:generate --force; then
              echo "Laravel key generated successfully"
            else
              echo "Failed to generate Laravel key, trying alternative method..."
              docker-compose -f docker-compose.prod.yml exec -T app php -r "echo 'base64:'.base64_encode(random_bytes(32));" > /tmp/key
              if [ -s /tmp/key ]; then
                APP_KEY=$(cat /tmp/key)
                sed -i "s|APP_KEY=.*|APP_KEY=$APP_KEY|" .env
                echo "Laravel key set manually"
              fi
            fi

            # Database operations with retries
            echo "=== Database Setup ==="
            for i in {1..3}; do
              if docker-compose -f docker-compose.prod.yml exec -T app php artisan migrate --force; then
                echo "Database migration completed"
                break
              else
                echo "Migration attempt $i failed, retrying..."
                sleep 10
              fi
            done

            # Cache optimization
            echo "=== Cache Optimization ==="
            docker-compose -f docker-compose.prod.yml exec -T app php artisan config:clear || echo "Config clear failed"
            docker-compose -f docker-compose.prod.yml exec -T app php artisan config:cache || echo "Config cache failed"
            docker-compose -f docker-compose.prod.yml exec -T app php artisan route:cache || echo "Route cache failed"
            docker-compose -f docker-compose.prod.yml exec -T app php artisan view:cache || echo "View cache failed"
            docker-compose -f docker-compose.prod.yml exec -T app php artisan storage:link || echo "Storage link failed"

            # Set final permissions
            echo "=== Setting Final Permissions ==="
            docker-compose -f docker-compose.prod.yml exec -T app chown -R www-data:www-data /var/www/storage /var/www/bootstrap/cache || echo "Permission setting failed"
            docker-compose -f docker-compose.prod.yml exec -T app chmod -R 775 /var/www/storage /var/www/bootstrap/cache || echo "Chmod failed"

            # Remove any existing nginx config
            sudo rm -f /etc/nginx/sites-enabled/inventory-management.shop

            # Configure nginx with better PHP-FPM handling
            sudo tee /etc/nginx/sites-available/inventory-management.shop > /dev/null <<EOF
            server {
                listen 80;
                server_name inventory-management.shop www.inventory-management.shop;
                return 301 https://\$server_name\$request_uri;
            }

            server {
                listen 443 ssl http2;
                server_name inventory-management.shop www.inventory-management.shop;

                ssl_certificate /etc/letsencrypt/live/inventory-management.shop/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/inventory-management.shop/privkey.pem;

                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_prefer_server_ciphers on;
                ssl_session_cache shared:SSL:10m;

                access_log /var/log/nginx/inventory_access.log;
                error_log /var/log/nginx/inventory_error.log debug;

                root $PROJECT_DIR/public;
                index index.php index.html index.htm;

                # Increase client body size for file uploads
                client_max_body_size 10M;

                # Security headers
                add_header X-Frame-Options "SAMEORIGIN" always;
                add_header X-XSS-Protection "1; mode=block" always;
                add_header X-Content-Type-Options "nosniff" always;

                location / {
                    try_files \$uri \$uri/ /index.php?\$query_string;
                }

                location ~ \.php$ {
                    try_files \$uri =404;
                    fastcgi_split_path_info ^(.+\.php)(/.+)$;
                    fastcgi_pass 127.0.0.1:9000;
                    fastcgi_index index.php;
                    fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
                    fastcgi_param PATH_INFO \$fastcgi_path_info;
                    fastcgi_param HTTPS on;

                    # Increase timeouts
                    fastcgi_connect_timeout 60s;
                    fastcgi_send_timeout 60s;
                    fastcgi_read_timeout 60s;

                    include fastcgi_params;
                }

                location ~ /\.ht {
                    deny all;
                }

                location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                    expires 1y;
                    add_header Cache-Control "public, immutable";
                }

                # Laravel storage
                location ^~ /storage/ {
                    alias $PROJECT_DIR/storage/app/public/;
                    try_files \$uri =404;
                }
            }
            EOF

            # Enable site
            sudo ln -sf /etc/nginx/sites-available/inventory-management.shop /etc/nginx/sites-enabled/

            # Test nginx config
            echo "=== Testing Nginx Configuration ==="
            if sudo nginx -t; then
              if ! sudo systemctl is-active --quiet nginx; then
                echo "Starting nginx service..."
                sudo systemctl start nginx
              else
                echo "Reloading nginx service..."
                sudo systemctl reload nginx
              fi

              # Final test
              echo "=== Final Tests ==="
              curl -I http://127.0.0.1 || echo "Local HTTP test failed"
              systemctl status nginx --no-pager
            else
              echo "Nginx configuration test failed"
              exit 1
            fi

            echo "=== Final Debug ==="
            echo "Checking if public/index.php exists:"
            ls -la $PROJECT_DIR/public/index.php || echo "index.php NOT FOUND!"

            echo "Testing Laravel via container:"
            docker-compose -f docker-compose.prod.yml exec -T app php artisan --version || echo "Laravel not working"

            echo "Nginx error logs:"
            sudo tail -20 /var/log/nginx/inventory_error.log || echo "No nginx errors yet"



